Collision - two distinct keys hashing to same index
  - birthday problem => can't avoid collisions unless we have quadratic amount of memory
  - coupon collector + load balancing => collisions will be evenly distributed

  Challenge: deal with collisions efficiently

  Separate chaining
    - use an array of M < N linked lists
    Hash -  map key to integer i between 0 and M - 1
    Insert - put at front of ith chain
    Search - need to search only ith chain

  - means you will only have to look for ~ M/N entries (assuming even distribution in hashing)

  Proposition: under uniform hashing assumption, probability that the number of keys in a list is within a constant factor of N/M
    is extremely close to 1

  Consequence: number of probes for search/insert is proportional to N/M
    - M too large => too many empty chains
    - M too small => chains too long
    - Typical choice => M ~ N/5 = constant time operations

  Worst-case cost for search, insert, and delete => lg N
  Average-case => 3-5 (constant time)
    - under uniform hashing assumption
