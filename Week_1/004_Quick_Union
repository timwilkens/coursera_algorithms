Quick Union (lazy approach)

  Uses the same data structure with a new interpretation

    Integer array id[] of size N
    Interpretation: id[i] is parent of i
    Root of i is id[id[id[..id[i]..]]] - every item has a root (which could be itself)

    0 1 2 3 4 5 6 7 8 9                  0  1   9    6  7  8
    0 1 9 4 9 6 6 7 8 9                        / \   |
                                              2   4  5
                                                  |
                                                  3

  Suppose that in a quick-union data structure on 10 elements that the id[] array is 
    0 9 6 5 4 2 6 1 0 5

  What are the roots of 3 and 7 respectively?

  1. 3 and 7                          0         6      4
  2. 4 and 4                          |         |
  3. 6 and 4                          8         2
* 4. 6 and 6                                    |
                                                5
                                               / \ 
                                              3   9
                                                  |    
                                                  1
                                                  |
                                                  7

  Find: check if p and q have the same root - are they in the same connected component

  Union: merge components by setting the id's of p's root to the id of q's root

  0 1 2 3 4 5 6 7 8 9

  union(4,3)
  0 1 2 3 3 5 6 7 8 9

  union(3,8)
  0 1 2 8 3 5 6 7 8 9

  union(6,5)
  0 1 2 8 3 5 5 7 8 9

  union(9,4)
  0 1 2 8 3 5 5 7 8 8

  Union now only requires changing a single element in the array

  Constructor is the same as quick-find

  Method to find root by going until the value is equal to the index (we have a root)

    while ($i != $id[i]) {
      $i = $id[i];
    }
    return $i;

  Find: check if the roots of p and q are the same with the above method

    return (root($p) == root($q));

  Union: get root of both elements and set id of p to point to root of q
 
    my $proot = root($p);
    my $qroot = root($q);
    $id[$proot] = $qroot;

  Benefit: we no longer have two for loops (although we still have a while loop)

  Quick-Union
    Initialize = N
    Union = N
    Find = 1

  Defect: the trees can get very tall which causes union to be expensive
    (Quick find kept the trees very flat, but this maintenance was expensive)

  What is the maximum number of array accesses during a find operation when using the quick-union data structure of N elements?

  1. constant
  2. logarithmic
* 3. linear  - worst case: both at the bottom of a tall skinny tree 2(N - 1)
  4. quadratic
