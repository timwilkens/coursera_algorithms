Mathematical Models

  Observation allows us to predict what will happen, but doesn't allow us to understand it
  Mathematical models of running time created first by Knuth
    In principle, we can get precise models of algorithms

  Total running time: sum of cost * frequency of operations

  Can lay of the cost of basic operations (add, multiply, declare variable etc..) by testing them
    and treating them as constants

  Rookie mistake: string concatenation is a constant time operation in relation to the length of the strings

  Example: 1-Sum

  my $count = 0;
  for (my $i = 0; $i < $N; $i++) {
    if ($array[$i] == 0) {
      $count++;
    }
  }

  variable declarations  - 2
  assignment statement   - 2
  less than compare      - N + 1
  equal to compare       - N
  array access           - N
  increment              - N to 2N ($i incremented N times, $count could be 0 to N)

  Even with just the 2-Sum problem it starts to be tedious to count up the operations in an exact way

    Trade-off: only count the operations that are most expensive 
      - Estimate running time as a function of input size N

    Simplification:
     We will drop all low order terms (when N is large, the low terms are neglible)
     1/6N^3 - 1/2N^2 + 1/3N    => ~1/6N^3   [Tilde Notation]

    For the 2-Sum problem, with two for loops:
      We estimate there are ~N^2 array accesses, so our running time is exponential in N

    3-Sum => ~ 1/2N^3

    How to estimate a discrete sum?  (1 + 2 + 3 + .... + N)
      -Use calculus (if you know it...)

     In principle, accurate mathematical models are available

     In practice:
       - Formulas get complicated
       - Advanced mathematics might be required
       - Exact models best left for experts

     Bottom line: we use approximate models in this course

     How many array accesss does the following code fragment make as a function of N?

     int sum = 0;
     for (int i; i < N; i++)
       for (int j = i+1; j < N; j++)
         for (int k = 1; k < N; k = k*2)
         if (a[i] + a[j] >= a[k]) sum++;

      1. ~ 3 N^2
  *   2. ~ 3/2 N^2 * lg(N)
      3. ~ 3/2 N^3
      4. ~ 3 N^3
    
      Explanation: For a given value of i and j, the k-loop requires only 3 lg(N) array accesses: the body runs lg(N) times
       and each loop involves 3 array accesses. The k-loop is executed ~ 1/2 N^2 (isn't it N * N-1 times?)
