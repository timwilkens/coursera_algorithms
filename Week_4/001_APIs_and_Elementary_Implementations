APIs and Elementary Implementations - Priority Queues

  Extension of general look into inserting or deleting items from collections

  Stack - remove the item most recently added
  Queue - remove the item least recently added
  Randomized Queue (bag) - remove a random item
  Priority Queue - remove the largest (or smallest) item

    - essentially we want the items to be ordered only as much as we need.
      - want access to the min and max, without sorting on every insertion, or doing
        a massive number of rearrangments every addition/deletion

    General API -
      create new priority queue

      insert a key
      remove and return the largest key  (separate API for finding the minimum)
      is the queue empty?

      Optional: return max and leave in place
                size of queue (number of items)

    Applications:
      - Event-driven simulation   - customers in a line, colliding particles
      - Numerical computation     - reducing roundoff error
      - Data compression          - Huffman codes
      - Graph searching           - Dijkstra's algorithm, Prim's algorithm
      - Number theory             - sum of powers
      - Artificial intelligence   - A* search
      - Statistics                - maintain largest M values in sequence
      - Operating systems         - load balancing, interrupt handling
      - Discrete optimization     - bin packing, scheduling
      - Spam filtering            - bayesian spam filter

   Challenge: find the largest M items in a stream of N items
     - fraud detection
     - file maintenance

    Constraint: Not enough memory to store N items

    High-level

     new Min oriented priority queue

     insert next item
     if (size of priority queue > M)
       delete from queue (the lowest item)

   Possible ways to do this:

                      time          space
     sort             NlogN           N

     elementary PQ     MN             M

     binary heap      NlogM           M
 
     best in theory    N              M

  There are two options for implementing a priority queue:

    1. unordered
      - easy and quick to add item (just a normal stack or queue)
      - more expensive to return Min (time proportional to queue size)

    2. ordered
      - expensive to maintain (could require movement on every insertion)
      - cheap to return the next element

                   insert             del max           max
   unordered         1                   N               N
 
   ordered           N                   1               1

   goal             logN                logN            logN


    What is the expected number of array accesses and compares, respectively,
      to insert a random key into an ordered array implementation of a priority queue?

    1. logarithmic and logarithmic
    2. logarithmic and linear
**  3. linear and logarithmic   (use binary search to find insertion point)
    4. linear and linear
