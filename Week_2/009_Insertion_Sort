Insertion Sort

  Very difference performance from selection sort

  General idea:
    Start from the left as in selction sort.
    But, we compare to the cards to the left, rather than looking at everything
    All elements from our index to the left are in order (invariants)

    Inner loop will look like:
    for (my $j = $i; $j > 0; $j--) {
      if ($nums[$j] < $nums[$j-1]) {
        swap($j, $j - 1);
      }
    }

    Both selection sort and insertion sort have two for loops, one compare, and swaps

    To sort a randomly-ordered array with distinct keys, insertion sort uses ~ (N ^ 2) / 4 compares and ~ (N ^ 2) / 4 exchanges
      - more complicated to prove than selection sort
      - Expectation: each element that needs to go back will go about halfway back

    Will be about TWICE as fast as selection sort (though it will probably do more swaps)

    Best case: if the array is in ascending order, insertion sort makes N - 1 compares and 0 exchanges (faster than selection sort)
    
    Worst case: descending order - (N ^ 2) / 2 compares and (N ^ 2) / 2 exchanges (slower than selection sort)
      - I imagine you could help this by only doing one exchange

    INVERSION: a pair of keys that are out of order in an array

     An array is partially sorted if the number of inversions is <= c N (linear)
       - A subarray of size 10 appended to a sorted subarray of size N
       - An array of size N with only 10 entries out of place

    For partially-sorted arrays, insertion sort runs in linear time.
      Proof: the number of exchanges equals the number of inversions

How many compares does insertion sort make on an input array that is already sorted?

  1. constant
  2. logarithmic
* 3. linear
  4. quadratic

