Sorting Introduction

  Sort problem - rearrange N items into ascending order

  We want to generalize this, and be able to sort any kind of data

  Examples:
    - sort random numbers 
    - sort strings in alphabetical order
    - sort the files in a directory by filename

    How can we make one sort function that will do all of these?

    Callback = reference to executable code
      Client passes array of objects to sort() function
      The sort() function calls back to object's compareTo(0 method as needed
      Pass functions as arguments to other functions

      Some examples:
        Java: interfaces
        C: function pointers
        C++: class-type functors
        C#: delegates
        Python, Perl, Javascript: first-class functions

    Example sort routine:

    my $n = scalar(@nums) - 1;
    for (my $i = 0; $i < $n; $i++) {
      for (my $j = $i; $j > 0; $j--) {
        if ($nums[$j] < $nums[$i]) {   # Would use some "compare" callback based on our data type
          my $temp = $nums[$j];
          $nums[$j] = $nums[$i];
          $nums[$i] = $temp;
        }
      }
    }
    The above function does not use a callback.
    We are requiring the input be numberic.

    Requirement for sorting data: Total order

    A total order is a binary relation <= that satisfies:
      1. Antisymmetry: if v <= w and w <= v, then v == w
      2. Transitivity: if v <= w, w <= x, then v <= x
      3. Totality: either v <= w or w <= v or both

      Rock, Paper, Scissors does NOT satisfy the total order relation

   CompareTo() can return one of three values:
     1. First less than second: -1
     2. First greater than second: 1
     3. Equal: 0

   Encapsulate two methods to make our sorting easier to digest:
     1. Exchanging items in an array
     2. Comparing items (less than/ greater than)

   Potential problem to think about: ensure our sort routines do not corrupt data
     - Data may end up looking sorted when it has really been mutated


