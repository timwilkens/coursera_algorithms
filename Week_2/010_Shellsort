Shellsort

  Idea: insertion sort is inefficient because we do so many swaps
    Solution h-sort the array
      
    H-sort - sort every h-th element from the first to the the end in order
           - then sort every h-th element from the second to the end
           - and so on....

    Shellsort (Shell 1959): h-sort array for decreasing sequence of values of h
      - We can implement each level of sorting with only a few exchanges

      Input: S H E L L S O R T E X A M P L E
    13-sort: P H E L L S O R T E X A M S L E
     4-sort: L E E A M H L E P S O L T S X R
     1-sort: A E E E H L L L M O P R S S T X

      H-sort - Insertion sort with a stride length h (look back by h instead of 1)

      Why insertion sort?
        1. big increments => small subarray
        1. small increments => nearly in order (stay tuned)

      7-sort => start at index 7 and go to the end

      1-sort is identical to insertion sort
      General idea: h-sort on big increments to avoid lots of swaps
                    once we have partially sorted the array, finish the sorting with insertion sort (linear on partially sorted)

      Proposition: a g-sorted array remains g-sorted after h-sorting it
        - Implication: we won't be undoing work by doing multiple h-sorts on an array (or re-doing work)

    What increment sequence should we use?
      Powers of two are bad. Never compare even and odd positions until 1-sort
      1,2,4,8,16,...

      Powers of two minus one. Maybe. 
      1,3,7,15,31,....

      3x + 1. (from Knuth). OK. Easy to compute.
      1,4,13,40,121,....

      Sedgewick. Good. Hard to beat in empirical studies
      1,5,19,41,109,209,505,...
 
      Which increment sequence is best is still an open research question

    Shellsort will look almost identical to insertion sort.
    But, it will have an outer control loop specifying the increment to be used by insertion sort

    The analysis of Shellsort is still open.

    Proposition: the worst-case number of compares used by shellsort with the 3x+1 increments is O(N ^ (3/2))

    Property: number of compares used by shellsort with the 3x+1 increments is at most a small multiple of N times the # of increments used

    Example of a simple idea leading to substantial performance gains
    Useful in practice:
      - fast unless array size is huge
      - tiny, fixed footprint for code
      - hardware sort prototype

    Simple algorithm, nontrivial performance, interesting questions:
      - asymptotic growth rate?
      - best sequence of increments?
      - average-case performance

  Lesson: some good algorithms are still awaiting discovery
    - Has the potential to be faster than any other sorting algorithm we know of
